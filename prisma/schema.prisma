// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

enum Role {
  OWNER
  ADMIN
  BILLING
  USER
  TRACKER
  VIEWER
}

model Tenant {
  id         String     @id @default(dbgenerated("concat('tnt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name       String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  users      User[]
  activities Activity[]
  Client     Client[]
  Project    Project[]
}

model User {
  id         String     @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  email      String     @unique
  name       String
  password   String?
  avatar     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  activities Activity[]
}

model Activity {
  id        String    @id @default(dbgenerated("concat('act_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name      String?
  startAt   DateTime
  endAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  Client    Client?   @relation(fields: [clientId], references: [id])
  clientId  String?   @db.Text
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?   @db.Text
}

model Client {
  id         String     @id @default(dbgenerated("concat('cli_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name       String
  color      String?
  avatar     String?
  email      String?
  address    String?
  note       String?
  currency   String     @default("USD")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  activities Activity[]
  projects   Project[]
}

model Project {
  id         String     @id @default(dbgenerated("concat('prj_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name       String
  color      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  clientId   String?
  client     Client?    @relation(fields: [clientId], references: [id])
  activities Activity[]
}
