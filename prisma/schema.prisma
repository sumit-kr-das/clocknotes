generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

enum UserRole {
  ADMIN
  USER
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
  LEAD
}

model Tenant {
  id               String      @id @default(dbgenerated("concat('tnt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name             String?
  stripeCustomerId String?
  expirationDate   DateTime?
  plan             Plan        @default(FREE)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  users            User[]
  activities       Activity[]
  Client           Client[]
  Project          Project[]
  Tag              Tag[]
  Task             Task[]
  Team             Team[]
  Workspace        Workspace[]
}

model User {
  id         String     @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  email      String     @unique
  name       String
  password   String?
  avatar     String?
  role       UserRole   @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  activities Activity[]
}

model Activity {
  id          String           @id @default(dbgenerated("concat('act_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name        String?
  startAt     DateTime
  endAt       DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Client      Client?          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String?          @db.Text
  Project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace?       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId   String?          @db.Text
  tag         TagsOfActivity[]
}

model Client {
  id          String     @id @default(dbgenerated("concat('cli_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name        String
  color       String?
  avatar      String?
  email       String?
  address     String?
  note        String?
  currency    String     @default("USD")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activities  Activity[]
  projects    Project[]
}

model Project {
  id           String     @id @default(dbgenerated("concat('prj_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name         String
  color        String?
  accessType   String     @default("public")
  totalAmount  Int        @default(000)
  isBillable   Boolean    @default(false)
  currencyType String     @default("USD")
  rate         Int        @default(000)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clientId     String?
  client       Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  workspaceId  String?
  workspace    Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activities   Activity[]
  Task         Task[]
}

model Tag {
  id          String           @id @default(dbgenerated("concat('tag_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name        String           @unique
  tenantId    String
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace?       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  activity    TagsOfActivity[]
}

model TagsOfActivity {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  assignedAt DateTime @default(now())

  @@id([activityId, tagId])
}

model Task {
  id          String     @id @default(dbgenerated("concat('task_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name        String     @unique
  status      String     @default("Todo")
  order       Int
  description String
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Workspace {
  id           String     @id @default(dbgenerated("concat('workspace_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name         String
  Team         Team[]
  inviteString String     @default(dbgenerated("concat('invite_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  tenantId     String
  type         String     @default("Default")
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Task         Task[]
  Activity     Activity[]
  Client       Client[]
  Project      Project[]
  Tag          Tag[]
}

model Team {
  id          String     @id @default(dbgenerated("concat('team_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role        Role       @default(MEMBER)
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
